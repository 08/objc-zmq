`objc-zmq`: An Objective-C binding to `libzmq`
==============================================

This is an Objective-C version
of the reference ZeroMQ
[object-oriented C API][zmq-docs].
It follows the guidelines
laid out by the official
["Guidelines for ZeroMQ bindings"][binding-zmq].

[zmq-docs]: http://api.zeromq.org/zmq.html (zmq(7) Manual Page)
[binding-zmq]: http://www.zeromq.org/docs:bindings (Guidelines for ZeroMQ Bindings)

Documentation
-------------
Refer to the [ZeroMQ manual pages][zmq-docs].
The Objective-C binding
maintains a bit more state
than the C API exposes,
in that you can query
a `ZMQContext`
for its sockets
and query a `ZMQSocket`
for its context.

Thread Safety
-------------
ZeroMQ has some restrictive thread safety and coupling issues:

* Sockets can only be used from the thread that created them.
* All ZMQ sockets provided in a single call to `zmq_poll()` must have been created using the same context.

Because sockets
are coupled to contexts
for polling,
you have to track
each socket's context
and make sure not to mix them.
(The `ZMQSocket` class tracks this for you.)

Because each socket
is bound to the thread that created it,
you must be very careful when using
ZeroMQ sockets
with Grand Central Dispatch
or `NSOperationQueue`.
The only persistent thread
that these two expose
is the thread
you're least likely
to want to perform socket operations on:
the main thread.

Starting with
ZeroMQ 2.1.0,
you can use a socket
from any thread
provided you issue
a full memory barrier
between usage on one thread
and on the other.
The easiest way is to use
`OSMemoryBarrier()`
from `<libkern/OSAtomic.h>`.

To Do
-----
* Add functional tests in the form of sample code.
* Provide a more (Core)Foundation-like API
(`CFSocket`, `CFFileDescriptor`)
that takes advantage of the runloop.
This is complicated by
the threading constraints
present in libzmq-2.0.7.
